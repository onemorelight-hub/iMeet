function getLocalMediaStream(constraint){
  console.log("getLocalMediaStream callMode: "+callMode);

  if(callMode ==="Video"){
    navigator.mediaDevices.getUserMedia(videoConstraint).then(gotStream).catch(function(e) {
      alert('Getting error to get userMedia data: ' + e.name);
    });
  }else{
    navigator.mediaDevices.getUserMedia(audioConstraint).then(gotStream).catch(function(e) {
      alert('Getting error to get userMedia data: ' + e.name);
    });
  }
}

function gotStream(stream) {
  console.log('Adding local stream.');
  localStream = stream;
  console.log("localStream-> "+localStream);
  localVideo.srcObject = stream;
  mediaReadyStatus = true;
}

function createPeerConnection() {
  try {
    pc = new RTCPeerConnection(serverConfig);
    pc.onicecandidate = handleIceCandidate;
    pc.onaddstream = handleRemoteStreamAdded;
    pc.onremovestream = handleRemoteStreamRemoved;
    console.log('Created RTCPeerConnnection');
  } catch (e) {
    console.log('Failed to create PeerConnection, exception: ' + e.message);
    alert('Cannot create RTCPeerConnection object.');
    return;
  }
}

function handleIceCandidate(event) {
  console.log('icecandidate event: ', event);
  if (event.candidate) {
    sendMessage({
      type: 'candidate',
      label: event.candidate.sdpMLineIndex,
      id: event.candidate.sdpMid,
      candidate: event.candidate.candidate
    });
  } else {
    console.log('End of candidates.');
  }
}

function handleRemoteStreamAdded(event) {
  console.log("handleRemoteStreamAdded callMode: "+callMode);
  if(callMode == "Video"){
    console.log('Remote stream added.');
    remoteStream = event.stream;
    console.log("remoteStream: "+remoteStream);
    remoteVideo.srcObject = remoteStream;
    enableRemoteVideoDiv();
  }else{
    remoteStream = event.stream;
    remoteAudio.srcObject = remoteStream;
  }
}

function handleRemoteStreamRemoved(event) {
  console.log('Remote stream removed. Event: ', event);
}

function sendMessage(message) { 
  console.log('Client sending message: to ', selectedUserSocket);
  socket.emit('message', {"id": selectedUserSocket, "description": message} );
}

function setLocalAndSendMessage(sessionDescription) {
  pc.setLocalDescription(sessionDescription);
  console.log('setLocalAndSendMessage sending message', sessionDescription);
  sendMessage(sessionDescription);
}

function handleCreateOfferError(event) {
  console.log('createOffer() error: ', event);
}
function onCreateSessionDescriptionError(error) {
  trace('Failed to create session description: ' + error.toString());
}

function doAnswer() {
  console.log('Sending answer to peer.');
  pc.createAnswer().then(setLocalAndSendMessage,onCreateSessionDescriptionError);
}

window.onbeforeunload = function() {
  sendMessage('bye');
};
