function getLocalMediaStream(constraint){  if(callMode ==="Video"){    navigator.mediaDevices.getUserMedia(videoConstraint).then(gotStream).catch(function(e) {      alert('Getting error to get userMedia data: ' + e.name);    });  }else{    navigator.mediaDevices.getUserMedia(audioConstraint).then(gotStream).catch(function(e) {      alert('Getting error to get userMedia data: ' + e.name);    });  }}function gotStream(stream) {  localStream = stream;  console.log("localStream-> "+localStream);  localVideo.srcObject = stream;  mediaReadyStatus = true;}function createPeerConnection() {  try {    pc = new RTCPeerConnection(serverConfig);    pc.onicecandidate = handleIceCandidate;    pc.onaddstream = handleRemoteStreamAdded;    pc.onremovestream = handleRemoteStreamRemoved;  } catch (e) {    alert('Cannot create RTCPeerConnection object.');    return;  }}function handleIceCandidate(event) {  if (event.candidate) {    sendMessage({      type: 'candidate',      label: event.candidate.sdpMLineIndex,      id: event.candidate.sdpMid,      candidate: event.candidate.candidate    });  } else {  }}function handleRemoteStreamAdded(event) {  if(callMode == "Video"){    remoteStream = event.stream;    console.log("remoteStream: "+remoteStream);    remoteVideo.srcObject = remoteStream;    enableRemoteVideoDiv();  }else{    remoteStream = event.stream;    remoteAudio.srcObject = remoteStream;  }}function handleRemoteStreamRemoved(event) {}function sendMessage(message) {   socket.emit('message', {"id": selectedUserSocket, "description": message} );}function setLocalAndSendMessage(sessionDescription) {  pc.setLocalDescription(sessionDescription);  sendMessage(sessionDescription);}function handleCreateOfferError(event) {}function onCreateSessionDescriptionError(error) {}function doAnswer() {  pc.createAnswer().then(setLocalAndSendMessage,onCreateSessionDescriptionError);}window.onbeforeunload = function() {  sendMessage('bye');};